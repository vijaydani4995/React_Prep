function throttle(fn, limit) {
  let lastCall = 0;
  return function () {
    const now = Date.now();
    if (now - lastCall >= limit) {
      lastCall = now;
      fn();
    }
  };
}

function sayHello() {
  console.log("Hello!", new Date().toLocaleTimeString());
}

const throttledHello = throttle(sayHello, 2000);

// Simulate rapid clicks
setInterval(() => {
  throttledHello(); // Will log "Hello!" once every 2 seconds
}, 500);

âœ… 1. Throttle
ðŸ”¸ Use Case: Limit how often a function can run while scrolling
ðŸ”¸ Concept: Run the function at most once every N milliseconds
ðŸ”§ Example:

function throttle(func, limit) {
  let lastCall = 0;
  return function (...args) {
    const now = Date.now();
    if (now - lastCall >= limit) {
      lastCall = now;
      func.apply(this, args);
    }
  };
}

// Usage
const handleScroll = throttle(() => {
  console.log("Scroll event at", new Date().toISOString());
}, 1000);

// Simulate scroll
window.addEventListener("scroll", handleScroll);



function debounce(fn, delay) {
  let timeout;
  return function () {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      fn();
    }, delay);
  };
}

function sayHello() {
  console.log("Hello!", new Date().toLocaleTimeString());
}

const debouncedHello = debounce(sayHello, 2000);

// Simulate rapid clicks
setInterval(() => {
  debouncedHello(); // Only runs 2s *after* the last call
}, 500);

// After stopping the rapid calls, "Hello!" will appear once after 2s


âœ… 2. Debounce
ðŸ”¸ Use Case: Limit API calls while typing in a search input
ðŸ”¸ Concept: Wait for N milliseconds after the last event before running the function.
ðŸ”§ Example:

function debounce(func, delay) {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => func.apply(this, args), delay);
  };
}

// Usage
const search = debounce((query) => {
  console.log("Searching for:", query);
}, 300);

// Simulate typing
search("R");
search("Re");
search("Red"); // Only this will be logged after 300ms

