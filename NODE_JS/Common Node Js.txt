In Node.js interviews, there are often a variety of coding questions that assess your understanding of JavaScript, asynchronous
 programming, handling APIs, and Node.js-specific features. Here are some of the most commonly asked coding questions in Node.js interviews:

1. Implement a Simple REST API
Problem: Create a simple REST API using Node.js (with or without frameworks like Express). Implement basic CRUD operations for
 managing a resource like "users".
Key Topics: HTTP methods, routing, request/response, status codes, handling JSON, working with query params, body, and URL 
parameters.
Example:

javascript
Copy code
const express = require('express');
const app = express();
app.use(express.json());

let users = [{ id: 1, name: 'John' }];

// Get all users
app.get('/users', (req, res) => {
    res.json(users);
});

// Create a new user
app.post('/users', (req, res) => {
    const user = { id: users.length + 1, name: req.body.name };
    users.push(user);
    res.status(201).json(user);
});

// Update a user
app.put('/users/:id', (req, res) => {
    const user = users.find(u => u.id === parseInt(req.params.id));
    if (!user) return res.status(404).send('User not found');
    user.name = req.body.name;
    res.json(user);
});

// Delete a user
app.delete('/users/:id', (req, res) => {
    const userIndex = users.findIndex(u => u.id === parseInt(req.params.id));
    if (userIndex === -1) return res.status(404).send('User not found');
    users.splice(userIndex, 1);
    res.status(204).send();
});

app.listen(3000, () => console.log('Server is running on port 3000'));
2. Asynchronous Programming / Callbacks / Promises / Async-Await
Problem: Implement a function that reads a file asynchronously and returns its contents. Demonstrate usage with both callbacks and promises/async-await.
Key Topics: Callbacks, Promises, async-await, fs module, error handling.
Example:

javascript
Copy code
const fs = require('fs').promises;

// Using async-await
async function readFileContent(filePath) {
    try {
        const data = await fs.readFile(filePath, 'utf-8');
        return data;
    } catch (err) {
        console.error(err);
    }
}

readFileContent('test.txt').then(content => console.log(content));
3. Handling Concurrency with Promises
Problem: Implement a function that makes multiple asynchronous API calls and returns the result after all calls are completed. Use Promise.all.
Key Topics: Concurrency, Promises, Promise.all, error handling in asynchronous code.
Example:

javascript
Copy code
const fetch = require('node-fetch');

async function fetchMultipleUrls(urls) {
    try {
        const requests = urls.map(url => fetch(url).then(res => res.json()));
        const results = await Promise.all(requests);
        return results;
    } catch (error) {
        console.error('Error fetching URLs:', error);
    }
}

fetchMultipleUrls(['https://api.example.com/data1', 'https://api.example.com/data2'])
    .then(results => console.log(results));
4. Custom Middleware in Express
Problem: Write a custom middleware function in Express that logs the request method, URL, and timestamp whenever a request is made.
Key Topics: Middleware, next(), request and response cycle.
Example:

javascript
Copy code
const express = require('express');
const app = express();

// Custom middleware
app.use((req, res, next) => {
    console.log(`${req.method} ${req.url} at ${new Date().toISOString()}`);
    next(); // Pass control to the next middleware/route handler
});

app.get('/', (req, res) => {
    res.send('Hello World');
});

app.listen(3000, () => console.log('Server running on port 3000'));
5. Event Emitters
Problem: Create a custom event emitter class in Node.js and demonstrate how to emit and listen to custom events.
Key Topics: Event-driven programming, EventEmitter class.
Example:

javascript
Copy code
const EventEmitter = require('events');

class MyEmitter extends EventEmitter {}

const myEmitter = new MyEmitter();

// Register an event listener
myEmitter.on('event', () => {
    console.log('An event occurred!');
});

// Emit the event
myEmitter.emit('event');
6. File Upload with Multer
Problem: Implement a file upload endpoint using Multer in Express.
Key Topics: File handling, multer, multipart forms, file storage.
Example:

javascript
Copy code
const express = require('express');
const multer = require('multer');
const app = express();

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    }
});

const upload = multer({ storage: storage });

app.post('/upload', upload.single('file'), (req, res) => {
    res.send('File uploaded successfully!');
});

app.listen(3000, () => console.log('Server started on port 3000'));
7. Building a Simple TCP Server
Problem: Create a basic TCP server using the net module in Node.js that can receive messages and respond back.
Key Topics: net module, TCP protocol, sockets.
Example:

javascript
Copy code
const net = require('net');

const server = net.createServer((socket) => {
    socket.on('data', (data) => {
        console.log('Received:', data.toString());
        socket.write('Hello from the server!');
    });
});

server.listen(4000, () => {
    console.log('TCP server listening on port 4000');
});
8. Throttling or Debouncing API Requests
Problem: Implement throttling or debouncing to control the rate of API calls.
Key Topics: Throttling, debouncing, managing function execution over time.
Example (Debouncing):

javascript
Copy code
function debounce(func, delay) {
    let timeout;
    return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
    };
}

const fetchData = () => {
    console.log('Fetching data...');
};

const debouncedFetch = debounce(fetchData, 3000);

// Example usage: debouncedFetch gets called 3 seconds after the last invocation
debouncedFetch();
9. Process Management and Child Processes
Problem: Spawn a child process in Node.js that executes a system command and returns the result.
Key Topics: child_process module, spawn, exec.
Example:

javascript
Copy code
const { exec } = require('child_process');

exec('ls', (err, stdout, stderr) => {
    if (err) {
        console.error(`Error: ${err.message}`);
        return;
    }
    if (stderr) {
        console.error(`Stderr: ${stderr}`);
        return;
    }
    console.log(`Output:\n${stdout}`);
});
10. Stream Handling
Problem: Read a large file using streams and write it to another file.
Key Topics: Streams, fs module, pipe, handling large files.
Example:

javascript
Copy code
const fs = require('fs');

const readStream = fs.createReadStream('largefile.txt');
const writeStream = fs.createWriteStream('copy.txt');

readStream.pipe(writeStream);

readStream.on('end', () => {
    console.log('File copied successfully');
});
These are some of the most frequently asked Node.js coding questions that test core concepts like asynchronous programming, APIs, and Node.js features. Familiarizing yourself with these patterns will help you in technical interviews.