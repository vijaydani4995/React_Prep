/* Folder Structure:
/src
│   index.js
│   App.jsx
│   /components
│   │   Navbar.jsx
│   │   ProjectList.jsx
│   │   TaskBoard.jsx
│   │   TaskCard.jsx
│   /pages
│   │   Dashboard.jsx
│   │   ProjectDetail.jsx
│   │   Login.jsx
│   │   Signup.jsx
│   /redux
│   │   store.js
│   │   slices/authSlice.js
│   │   slices/projectSlice.js
│   │   slices/taskSlice.js
│   /services
│   │   authService.js
│   │   projectService.js
│   │   taskService.js
│   /utils
│       authUtils.js
│       validators.js
*/

// index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import store from './redux/store';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>
);

// App.jsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Dashboard from './pages/Dashboard';
import ProjectDetail from './pages/ProjectDetail';
import Login from './pages/Login';
import Signup from './pages/Signup';
import { useSelector } from 'react-redux';

export default function App() {
  const { token } = useSelector((state) => state.auth);
  return (
    <>
      <Navbar />
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/signup" element={<Signup />} />
        <Route
          path="/"
          element={token ? <Dashboard /> : <Navigate to="/login" />}
        />
        <Route
          path="/projects/:id"
          element={token ? <ProjectDetail /> : <Navigate to="/login" />}
        />
      </Routes>
    </>
  );
}

// components/Navbar.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { logout } from '../redux/slices/authSlice';

export default function Navbar() {
  const dispatch = useDispatch();
  const { user, token } = useSelector((state) => state.auth);

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <nav className="p-4 bg-gray-800 text-white flex justify-between">
      <Link to="/" className="text-xl font-bold">
        ProjectTracker
      </Link>
      <div>
        {token ? (
          <>
            <span className="mr-4">{user.name}</span>
            <button onClick={handleLogout}>Logout</button>
          </>
        ) : (
          <>
            <Link to="/login" className="mr-4">
              Login
            </Link>
            <Link to="/signup">Signup</Link>
          </>
        )}
      </div>
    </nav>
  );
}

// components/ProjectList.jsx
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchProjects } from '../redux/slices/projectSlice';
import { Link } from 'react-router-dom';

export default function ProjectList() {
  const dispatch = useDispatch();
  const { projects, loading } = useSelector((state) => state.projects);

  useEffect(() => {
    dispatch(fetchProjects());
  }, [dispatch]);

  if (loading) return <div>Loading projects...</div>;

  return (
    <ul>
      {projects.map((proj) => (
        <li key={proj.id} className="p-2 border-b">
          <Link to={`/projects/${proj.id}`}>{proj.name}</Link>
        </li>
      ))}
    </ul>
  );
}

// components/TaskBoard.jsx
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchTasks } from '../redux/slices/taskSlice';
import TaskCard from './TaskCard';

export default function TaskBoard({ projectId }) {
  const dispatch = useDispatch();
  const { tasks, loading } = useSelector((state) => state.tasks);

  useEffect(() => {
    dispatch(fetchTasks(projectId));
  }, [dispatch, projectId]);

  const statuses = ['todo', 'in_progress', 'review', 'done'];

  if (loading) return <div>Loading tasks...</div>;

  return (
    <div className="flex space-x-4">
      {statuses.map((status) => (
        <div key={status} className="w-1/4">
          <h3 className="font-bold capitalize mb-2">{status.replace('_', ' ')}</h3>
          <div>
            {tasks
              .filter((t) => t.status === status)
              .map((task) => <TaskCard key={task.id} task={task} />)}
          </div>
        </div>
      ))}
    </div>
  );
}

// components/TaskCard.jsx
import React from 'react';

export default function TaskCard({ task }) {
  return (
    <div className="p-2 mb-2 border rounded bg-white">
      <h4 className="font-semibold">{task.title}</h4>
      <p className="text-sm">{task.description}</p>
      <p className="text-xs text-gray-500">Due: {task.dueDate}</p>
    </div>
  );
}

// pages/Dashboard.jsx
import React from 'react';
import ProjectList from '../components/ProjectList';

export default function Dashboard() {
  return (
    <div className="p-4">
      <h2 className="text-2xl mb-4">Projects</h2>
      <ProjectList />
    </div>
  );
}

// pages/ProjectDetail.jsx
import React from 'react';
import { useParams } from 'react-router-dom';
import TaskBoard from '../components/TaskBoard';

export default function ProjectDetail() {
  const { id } = useParams();
  return (
    <div className="p-4">
      <h2 className="text-2xl mb-4">Project Details</h2>
      <TaskBoard projectId={id} />
    </div>
  );
}

// pages/Login.jsx
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { login } from '../redux/slices/authSlice';

export default function Login() {
  const dispatch = useDispatch();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(login({ email, password }));
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 max-w-md mx-auto">
      <h3 className="text-xl mb-4">Login</h3>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        className="w-full p-2 mb-2 border"
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        className="w-full p-2 mb-4 border"
      />
      <button type="submit" className="px-4 py-2 bg-blue-600 text-white">
        Login
      </button>
    </form>
  );
}

// pages/Signup.jsx
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { signup } from '../redux/slices/authSlice';

export default function Signup() {
  const dispatch = useDispatch();
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(signup({ name, email, password }));
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 max-w-md mx-auto">
      <h3 className="text-xl mb-4">Signup</h3>
      <input
        type="text"
        placeholder="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
        className="w-full p-2 mb-2 border"
      />
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        className="w-full p-2 mb-2 border"
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        className="w-full p-2 mb-4 border"
      />
      <button type="submit" className="px-4 py-2 bg-green-600 text-white">
        Signup
      </button>
    </form>
  );
}

// redux/store.js
import { configureStore } from '@reduxjs/toolkit';
import authReducer from './slices/authSlice';
import projectReducer from './slices/projectSlice';
import taskReducer from './slices/taskSlice';

export default configureStore({
  reducer: {
    auth: authReducer,
    projects: projectReducer,
    tasks: taskReducer,
  },
});

// redux/slices/authSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import authService from '../../services/authService';

export const login = createAsyncThunk('auth/login', authService.login);
export const signup = createAsyncThunk('auth/signup', authService.signup);

const authSlice = createSlice({
  name: 'auth',
  initialState: { user: null, token: null, loading: false },
  extraReducers: (builder) => {
    builder
      .addCase(login.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.token = action.payload.token;
      })
      .addCase(signup.fulfilled, (state, action) => {
        state.user = action.payload.user;
        state.token = action.payload.token;
      });
  },
});
export const logout = () => ({ type: 'auth/logout' });
export default authSlice.reducer;

// redux/slices/projectSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import projectService from '../../services/projectService';

export const fetchProjects = createAsyncThunk('projects/fetch', projectService.getProjects);

const projectSlice = createSlice({
  name: 'projects',
  initialState: { projects: [], loading: false },
  extraReducers: (builder) => {
    builder.addCase(fetchProjects.fulfilled, (state, action) => {
      state.projects = action.payload;
    });
  },
});
export default projectSlice.reducer;

// redux/slices/taskSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import taskService from '../../services/taskService';

export const fetchTasks = createAsyncThunk('tasks/fetch', taskService.getTasks);

const taskSlice = createSlice({
  name: 'tasks',
  initialState: { tasks: [], loading: false },
  extraReducers: (builder) => {
    builder.addCase(fetchTasks.fulfilled, (state, action) => {
      state.tasks = action.payload;
    });
  },
});
export default taskSlice.reducer;

// services/authService.js
import axios from 'axios';
const API = '/api/auth';
export default {
  login: async (credentials) => {
    const res = await axios.post(`${API}/login`, credentials);
    return res.data;
  },
  signup: async (data) => {
    const res = await axios.post(`${API}/register`, data);
    return res.data;
  },
};

// services/projectService.js
import axios from 'axios';
const API = '/api/projects';
export default {
  getProjects: async () => {
    const res = await axios.get(API);
    return res.data;
  },
};

// services/taskService.js
import axios from 'axios';
const API = '/api/tasks';
export default {
  getTasks: async (projectId) => {
    const res = await axios.get(`${API}?projectId=${projectId}`);
    return res.data;
  },
};

// utils/authUtils.js
export const setAuthToken = (token) => {
  if (token) {
    localStorage.setItem('token', token);
  } else {
    localStorage.removeItem('token');
  }
};

// utils/validators.js
export const isEmail = (email) => /\S+@\S+\.\S+/.test(email);
export const minLength = (str, len) => str.length >= len;
