What is shallow copy and deep copy in JavaScript ?
Last Updated : 20 Aug, 2024
JavaScript is a high-level, dynamically typed client-side scripting language. JavaScript adds functionality to static HTML pages. Like most other
 programming languages JavaScript allows supports the concept of deep copy and shallow copy. 

Shallow Copy:-

A shallow copy occurs when you copy the reference of an object to a new variable. In this process, only the top-level properties are copied, while 
nested objects or arrays still reference the original memory location. This means that if you change the nested properties in one object, those
 changes will reflect in the other because they share the same memory reference.

How Shallow Copy Works
When you assign one object to another using the assignment operator (=), a shallow copy is created:

Example: Below is an example of a shallow copy.





let employee = {
    eid: "E102",
    ename: "Jack",
    eaddress: "New York",
    salary: 50000
}

console.log("Employee=> ", employee);
let newEmployee = employee;    // Shallow copy
console.log("New Employee=> ", newEmployee);

console.log("---------After modification----------");
newEmployee.ename = "Beck";
console.log("Employee=> ", employee);
console.log("New Employee=> ", newEmployee);
// Name of the employee as well as 
// newEmployee is changed.
Output:



Explanation: From the above example, it is seen that when the name of newEmployee is modified, it is also reflected for the old employee object. 
This can cause data inconsistency. This is known as a shallow copy. The newly created object has the same memory address as the old one.

Hence, any change made to either of them changes the attributes for both. To overcome this problem, a deep copy is used. If one of them is removed 
from memory, the other one ceases to exist. In a way the two objects are interdependent.

Deep Copy

A deep copy, on the other hand, creates a completely independent copy of the object, including all nested objects or arrays. This ensures that 
changes made to one object do not affect the other. Each object is stored in a separate memory location, making them entirely independent.

Creating a Deep Copy
Now to create a deep copy of an object in JavaScript we use JSON.parse() and JSON.stringify() methods. Let us take an example to understand it better.

Example: Below is the example of deep copy.



let employee = {
    eid: "E102",
    ename: "Jack",
    eaddress: "New York",
    salary: 50000
}
console.log("=========Deep Copy========");
let newEmployee = JSON.parse(JSON.stringify(employee));
console.log("Employee=> ", employee);
console.log("New Employee=> ", newEmployee);
console.log("---------After modification---------");
newEmployee.ename = "Beck";
newEmployee.salary = 70000;
console.log("Employee=> ", employee);
console.log("New Employee=> ", newEmployee);
Output:



Explanation: Here the new object is created using the JSON.parse() and JSON.stringify() methods of JavaScript. JSON.stringify() takes a JavaScript object as 
an argument and then transforms it into a JSON string. This JSON string is passed to the JSON.parse() method which then transforms it into a JavaScript object.


To deep clone an array using a library, you can use Lodash, a popular JavaScript utility library. Here's how you can do it:-

Using Lodash's cloneDeep Method

// Import Lodash
const _ = require('lodash')

// Original array
const originalArray = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' },
  { id: 3, name: 'Charlie' }
];

// Deep clone the array
const clonedArray = _.cloneDeep(originalArray);

// Modify the cloned array
clonedArray[0].name = 'Eve';

// Verify original array remains unchanged
console.log('Original Array:', originalArray);
console.log('Cloned Array:', clonedArray);