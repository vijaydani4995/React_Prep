Select all records from a table


SELECT * FROM employees;
Select specific columns from a table


SELECT first_name, last_name FROM employees;
Count the number of rows in a table


SELECT COUNT(*) FROM employees;
Filter rows using a WHERE clause


SELECT * FROM employees WHERE department = 'Sales';
Find unique values using DISTINCT

SELECT DISTINCT department FROM employees;
Sort data using ORDER BY


SELECT * FROM employees ORDER BY last_name ASC;
Filter rows with multiple conditions (AND/OR)


SELECT * FROM employees WHERE department = 'Sales' AND salary > 50000;
Limit the number of rows returned

sql
Copy code
SELECT * FROM employees LIMIT 10;
Search for patterns using LIKE

sql
Copy code
SELECT * FROM employees WHERE first_name LIKE 'A%';
Use of IN operator to match multiple values

sql
Copy code
SELECT * FROM employees WHERE department IN ('Sales', 'HR', 'IT');
Aggregate Functions and Grouping:
Find the average salary

sql
Copy code
SELECT AVG(salary) FROM employees;
Find the total salary paid to employees

sql
Copy code
SELECT SUM(salary) FROM employees;
Find the maximum salary

sql
Copy code
SELECT MAX(salary) FROM employees;
Find the minimum salary

sql
Copy code
SELECT MIN(salary) FROM employees;
Group records by a column using GROUP BY

sql
Copy code
SELECT department, COUNT(*) FROM employees GROUP BY department;
Filter groups using HAVING

sql
Copy code
SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 60000;
Count the number of employees in each department

sql
Copy code
SELECT department, COUNT(*) FROM employees GROUP BY department;
Find departments with more than 5 employees

sql
Copy code
SELECT department, COUNT(*) FROM employees GROUP BY department HAVING COUNT(*) > 5;
Find employees with salaries above average

sql
Copy code
SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
Find the highest-paid employee in each department

sql
Copy code
SELECT department, MAX(salary) FROM employees GROUP BY department;
Subqueries and Joins:
Select employees from a department using a subquery

sql
Copy code
SELECT * FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');
Find employees who earn more than their department's average salary

sql
Copy code
SELECT * FROM employees e WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);
Inner join two tables

sql
Copy code
SELECT e.first_name, d.department_name
FROM employees e
INNER JOIN departments d ON e.department_id = d.department_id;
Left join two tables

sql
Copy code
SELECT e.first_name, d.department_name
FROM employees e
LEFT JOIN departments d ON e.department_id = d.department_id;
Right join two tables

sql
Copy code
SELECT e.first_name, d.department_name
FROM employees e
RIGHT JOIN departments d ON e.department_id = d.department_id;
Self-join example

sql
Copy code
SELECT e1.first_name, e2.first_name AS manager_name
FROM employees e1
INNER JOIN employees e2 ON e1.manager_id = e2.employee_id;
Full outer join example

sql
Copy code
SELECT e.first_name, d.department_name
FROM employees e
FULL OUTER JOIN departments d ON e.department_id = d.department_id;
Find employees who do not belong to any department

sql
Copy code
SELECT * FROM employees WHERE department_id IS NULL;
Use of EXISTS clause

sql
Copy code
SELECT * FROM employees WHERE EXISTS (SELECT 1 FROM departments WHERE department_id = employees.department_id);
Use of NOT EXISTS clause

sql
Copy code
SELECT * FROM employees WHERE NOT EXISTS (SELECT 1 FROM departments WHERE department_id = employees.department_id);
Advanced SQL Queries:
Find the second-highest salary

sql
Copy code
SELECT MAX(salary) FROM employees WHERE salary < (SELECT MAX(salary) FROM employees);
Find the nth highest salary (e.g., 3rd highest)

sql
Copy code
SELECT salary FROM employees ORDER BY salary DESC LIMIT 1 OFFSET 2;
Use of CASE statement

sql
Copy code
SELECT first_name, last_name, 
CASE 
    WHEN salary > 80000 THEN 'High'
    WHEN salary BETWEEN 50000 AND 80000 THEN 'Medium'
    ELSE 'Low'
END AS salary_bracket
FROM employees;
Rank employees by salary using RANK()

sql
Copy code
SELECT first_name, salary, RANK() OVER (ORDER BY salary DESC) AS rank FROM employees;
Use of ROW_NUMBER() to assign unique row numbers

sql
Copy code
SELECT first_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num FROM employees;
Use of PARTITION BY with ROW_NUMBER()

sql
Copy code
SELECT first_name, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank FROM employees;
Find duplicate records

sql
Copy code
SELECT first_name, COUNT(*)
FROM employees
GROUP BY first_name
HAVING COUNT(*) > 1;
Delete duplicate records but keep one

sql
Copy code
DELETE FROM employees
WHERE employee_id NOT IN (
    SELECT MIN(employee_id)
    FROM employees
    GROUP BY first_name, last_name
);
Find employees hired in the last 30 days

sql
Copy code
SELECT * FROM employees WHERE hire_date >= CURRENT_DATE - INTERVAL '30' DAY;
Find employees hired in a specific year

sql
Copy code
SELECT * FROM employees WHERE EXTRACT(YEAR FROM hire_date) = 2022;
Complex Queries:
Find top 5 employees with the highest salary in each department

sql
Copy code
SELECT * FROM (
    SELECT first_name, salary, department_id, 
           ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank
    FROM employees
) AS ranked_employees WHERE rank <= 5;
Update salary of employees by 10%

sql
Copy code
UPDATE employees SET salary = salary * 1.10;
Delete employees who have not been active for more than a year

sql
Copy code
DELETE FROM employees WHERE last_active < CURRENT_DATE - INTERVAL '1' YEAR;
Use of COALESCE to handle NULL values

sql
Copy code
SELECT first_name, COALESCE(phone, 'No phone') FROM employees;
Union two result sets

sql
Copy code
SELECT first_name FROM employees
UNION
SELECT first_name FROM customers;
Union All result sets (without removing duplicates)

sql
Copy code
SELECT first_name FROM employees
UNION ALL
SELECT first_name FROM customers;
Find employees without managers (Self join)

sql
Copy code
SELECT e.first_name FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id
WHERE m.employee_id IS NULL;
Correlated subquery example

sql
Copy code
SELECT first_name, salary FROM employees e1
WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e2.department_id = e1.department_id);
Create a view that shows employee details

sql
Copy code
CREATE VIEW employee_details AS 
SELECT first_name, last_name, department_name, salary
FROM employees e
JOIN departments d ON e.department_id = d.department_id;
Use of CTE (Common Table Expression)

sql
Copy code
WITH department_salary AS (
    SELECT department_id, AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department_id
)
SELECT e.first_name, e.salary, d.avg_salary
FROM employees e
JOIN department_salary d ON e.department_id