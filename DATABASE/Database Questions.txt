Stored Procedures
What is a stored procedure?

A stored procedure is a precompiled collection of SQL statements stored in the database. It can be executed repeatedly by calling its name, making database operations more efficient.
Follow-up: How does it differ from a function?

A stored procedure can return multiple result sets, and it does not need to return a value. It is primarily used for performing actions (INSERT, UPDATE, DELETE).
A function must return a value and is used for computations or retrieval of data.
What are the advantages of using stored procedures in a database?

Improved performance (precompiled)
Centralized business logic
Reduced network traffic (batch execution)
Enhanced security (you can restrict direct table access)
Easier maintenance
How do you create a stored procedure in your database system? Can you show an example?


CREATE PROCEDURE GetEmployeesWithHighSalary(IN minSalary DECIMAL(10,2))
BEGIN
   SELECT * FROM Employees WHERE salary > minSalary;
END;
This stored procedure fetches all employees whose salary is greater than a specified value (minSalary).

What is the difference between a stored procedure and a trigger?

A stored procedure is executed explicitly by a user or application.
A trigger is automatically invoked in response to certain events (INSERT, UPDATE, DELETE) on a table.
How do you handle errors in stored procedures?

Use error-handling mechanisms provided by the database, such as TRY...CATCH blocks in SQL Server or DECLARE HANDLER in MySQL.
Follow-up: How would you implement exception handling in a stored procedure?

sql
Copy code
DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
   ROLLBACK;
   SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error in procedure';
END;
What are IN, OUT, and INOUT parameters in stored procedures?

IN: Input parameter (read-only).
OUT: Output parameter (modified by the procedure and returned to the caller).
INOUT: Can be used both for input and output.
Example:

sql
Copy code
CREATE PROCEDURE SampleProcedure(IN inputParam INT, OUT outputParam INT)
BEGIN
   SET outputParam = inputParam * 10;
END;
Can a stored procedure return a result set? If so, how?

Yes, a stored procedure can return a result set by executing a SELECT statement.
What is the difference between deterministic and non-deterministic stored procedures?

Deterministic: Always produces the same result for the same input.
Non-deterministic: The result may vary for the same input (e.g., when using functions like NOW() or RAND()).
Can a stored procedure call another stored procedure? How would you implement this?

Yes, a stored procedure can call another stored procedure.
sql
Copy code
CALL AnotherProcedure(param1);
How do you optimize stored procedures?

Use indexing properly.
Minimize the number of database calls.
Avoid unnecessary computations and loops.
Use SET NOCOUNT ON to avoid extra result sets.
Follow-up: What are the performance considerations you keep in mind when writing stored procedures?

Efficient use of indexes, avoiding table scans, minimizing network traffic, and caching frequently accessed data.
How do you manage transactional consistency within a stored procedure?

Use transactions with BEGIN TRANSACTION, COMMIT, and ROLLBACK.
Follow-up: Can you explain how you implement COMMIT and ROLLBACK within a stored procedure?

sql
Copy code
BEGIN
   START TRANSACTION;
   -- Perform operations
   IF (error) THEN
      ROLLBACK;
   ELSE
      COMMIT;
   END IF;
END;
What are the security implications of using stored procedures?

Stored procedures can limit direct access to tables, enforce business rules, and control permissions at the procedure level.
Follow-up: How can you grant or restrict access to specific stored procedures?

Use GRANT EXECUTE to give permission and REVOKE EXECUTE to remove it.
Views
What is a view in SQL, and why do we use them?

A view is a virtual table that represents the result of a SELECT query. It simplifies complex queries, abstracts database schema, and provides security by restricting access to specific columns or rows.
What is the difference between a view and a table?

A table is a physical structure that stores data, while a view is a virtual table created by a query.
Can you update data in a view?

Yes, but only under certain conditions (e.g., the view must reference a single table, and it cannot use aggregate functions).
Follow-up: Under what conditions can a view be updatable?

The view must reference only one table, and all columns being updated must map to base table columns.
What are the advantages and disadvantages of using views?

Advantages: Simplifies complex queries, enhances security, provides abstraction.
Disadvantages: Performance overhead, limited functionality (e.g., certain views cannot be updated).
What is a materialized view, and how is it different from a regular view?

A materialized view stores the result set physically, improving query performance but requiring manual refresh. A regular view is a virtual table with no stored data.
How do you create a view in your database system?

sql
Copy code
CREATE VIEW EmployeeDepartments AS
SELECT e.EmployeeName, d.DepartmentName
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID;
Can a view contain an aggregate function?

Yes.
Follow-up: Can you give an example of a view that aggregates data?

sql
Copy code
CREATE VIEW DepartmentSalarySummary AS
SELECT DepartmentID, SUM(Salary) AS TotalSalary
FROM Employees
GROUP BY DepartmentID;
How do you manage permissions for views?

Use GRANT or REVOKE commands to assign or remove permissions on views.
Can a view call a stored procedure or a function?

A view cannot call a stored procedure, but it can use functions.
How do you handle performance issues related to views?

Use indexes on the underlying tables, optimize the query in the view, or use materialized views for complex aggregations.
General Database Concepts
What is normalization? Can you explain the different normal forms?

Normalization is the process of organizing data to minimize redundancy. The main normal forms are:
1NF: Eliminate repeating groups.
2NF: Eliminate partial dependencies.
3NF: Eliminate transitive dependencies.
Follow-up: What are the pros and cons of normalization?

Pros: Reduces redundancy, improves data integrity.
Cons: Can result in complex queries, possible performance trade-offs.
What is denormalization, and when would you use it?

Denormalization is the process of combining tables to improve read performance at the cost of increased redundancy. Itâ€™s useful in OLAP systems or read-heavy applications.
How would you design a database schema for a given problem?

Example: For a library management system:
Tables: Books, Authors, Members, Loans, Reservations.
Relationships: Books and Authors (many-to-many), Members and Loans (one-to-many).
What is an index in a database, and how does it improve query performance?

An index is a data structure that improves the speed of data retrieval. It allows the database to quickly locate the rows associated with key values.
Follow-up: What are the different types of indexes?

Clustered index: Sorts the data physically in the table.
Non-clustered index: A separate structure from the data.
What are ACID properties in databases?

Atomicity, Consistency, Isolation, and Durability are properties that ensure reliable transaction processing.
Follow-up: Why are they important?

They guarantee safe and consistent database operations, even in cases of system failures.
What is a transaction, and how do you manage transactions in a database?

A transaction is a unit of work that is executed as a whole. You can manage transactions using BEGIN, COMMIT, and ROLLBACK commands.
Follow-up: What are the differences between implicit and explicit transactions?

Implicit: Automatically managed by the database.
Explicit: Managed by the user with BEGIN, COMMIT, and ROLLBACK.
What is a deadlock in a database? How would you prevent or resolve it?

A deadlock occurs when two transactions block each other. It can be resolved by detecting deadlocks and aborting one transaction, or prevented by ensuring a consistent locking order.
What is the difference between INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN?

INNER JOIN: Returns rows with matching data in both tables.
LEFT JOIN: Returns all rows from the left table and matched rows from the right.
RIGHT JOIN: Returns all rows from the right table and matched rows from the left.
FULL OUTER JOIN: Returns all rows when there is a match in either table.
What are the different isolation levels in databases?

READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, and SERIALIZABLE. They control the visibility of data changes during transaction processing.
Follow-up: How do they affect data consistency and performance?

Higher isolation levels improve data consistency but can decrease performance due to increased locking.
What is a foreign key constraint, and how does it help in maintaining data integrity?

A foreign key constraint enforces a link between two tables, ensuring that referenced data exists, preventing orphaned records.
Follow-up: How would you handle a situation where you need to delete a record that is referenced by a foreign key in another table?

You can use ON DELETE CASCADE to automatically delete the referencing rows, or manually handle it by updating or deleting related records first.
How do you perform database partitioning, and what are its advantages?

Partitioning involves splitting a large table into smaller, more manageable pieces (partitions) based on a key, improving query performance and management.
What is sharding, and how is it different from partitioning?

Sharding is horizontal partitioning across multiple databases (different servers), while partitioning is usually done within a single database.
What is a CTE (Common Table Expression), and how would you use it?

A CTE is a temporary result set defined within a query using WITH. It simplifies complex queries.
Follow-up: How is a CTE different from a subquery?

A CTE improves readability and can be referenced multiple times within the same query, whereas a subquery is nested directly in the main query.
How do you optimize database queries?

Use indexes, avoid unnecessary columns, analyze execution plans, and minimize joins on large datasets.
Follow-up: What are the common tools or methods you use to analyze and improve query performance?

Query Execution Plans, Index Tuning, Profiling tools, EXPLAIN in MySQL, SQL Profiler in SQL Server.
What is the difference between SQL and NoSQL databases?

SQL databases are relational, schema-based, and use structured query language. NoSQL databases are non-relational, schema-less, and handle unstructured data (e.g., document, key-value stores).
Follow-up: When would you choose one over the other?

Choose SQL for structured data, ACID transactions, and complex queries. Use NoSQL for high scalability, unstructured data, and flexible schema requirements (e.g., social media, IoT data).


General Queries
Query to find all employees with salaries greater than the company average:

sql
Copy code
SELECT * 
FROM employees 
WHERE salary > (SELECT AVG(salary) FROM employees);
Fetch the nth highest salary from an employees table:

sql
Copy code
SELECT DISTINCT salary 
FROM employees 
ORDER BY salary DESC 
LIMIT 1 OFFSET n-1;  -- Replace n with the desired number
Query to display duplicate records in a table:


SELECT column_name, COUNT(*) 
FROM table_name 
GROUP BY column_name 
HAVING COUNT(*) > 1;
Remove duplicate records from a table while keeping one copy:

sql
Copy code
DELETE FROM table_name 
WHERE id NOT IN (SELECT MIN(id) FROM table_name GROUP BY column_with_duplicates);
Query to find employees who joined on a specific date and work in the same department:

sql
Copy code
SELECT * 
FROM employees 
WHERE join_date = 'YYYY-MM-DD' 
AND department_id = 'DEPT_ID';  -- Replace 'YYYY-MM-DD' and 'DEPT_ID' with actual values
Query to update multiple records with different values in a single query:

sql
Copy code
UPDATE employees
SET salary = CASE 
    WHEN employee_id = 1 THEN 5000
    WHEN employee_id = 2 THEN 6000
    ELSE salary
END
WHERE employee_id IN (1, 2);
Fetch the last 10 records from a table:

sql
Copy code
SELECT * 
FROM employees 
ORDER BY id DESC 
LIMIT 10;
Fetch all records where a column value starts with 'A':

sql
Copy code
SELECT * 
FROM employees 
WHERE name LIKE 'A%';

Find and delete orphan records in a table with foreign key constraints:


DELETE FROM child_table 
WHERE parent_id NOT IN (SELECT id FROM parent_table);
Implement pagination for 20 records per page:


SELECT * 
FROM employees 
LIMIT 20 OFFSET (page_number - 1) * 20;
Joins and Relationships
Fetch data using an inner join between two tables:

sql
Copy code
SELECT e.name, d.department_name 
FROM employees e 
INNER JOIN departments d 
ON e.department_id = d.department_id;
Fetch data using a left join where records in the left table exist but not in the right table:

sql
Copy code
SELECT e.name, d.department_name 
FROM employees e 
LEFT JOIN departments d 
ON e.department_id = d.department_id 
WHERE d.department_id IS NULL;
Self-join to find employees who report to the same manager:

sql
Copy code
SELECT e1.name AS Employee, e2.name AS Manager 
FROM employees e1 
INNER JOIN employees e2 
ON e1.manager_id = e2.employee_id;
Perform a full outer join in MySQL (using UNION):

sql
Copy code
SELECT * 
FROM employees e 
LEFT JOIN departments d 
ON e.department_id = d.department_id
UNION 
SELECT * 
FROM employees e 
RIGHT JOIN departments d 
ON e.department_id = d.department_id;
Count the number of orders placed by each customer using a group by clause:

sql
Copy code
SELECT customer_id, COUNT(order_id) AS order_count 
FROM orders 
GROUP BY customer_id;
Display department names with at least 5 employees:

sql
Copy code
SELECT d.department_name 
FROM departments d 
INNER JOIN employees e 
ON d.department_id = e.department_id 
GROUP BY d.department_name 
HAVING COUNT(e.employee_id) >= 5;
Fetch employee names along with their department name, even if the department has no employees:

sql
Copy code
SELECT e.name, d.department_name 
FROM employees e 
RIGHT JOIN departments d 
ON e.department_id = d.department_id;
Delete records where the primary key matches a foreign key in another table:

sql
Copy code
DELETE FROM child_table 
WHERE parent_id IN (SELECT id FROM parent_table);
Combine multiple tables with similar schema into one result set using UNION:

sql
Copy code
SELECT name, salary FROM employees 
UNION 
SELECT name, salary FROM contractors;
Subqueries and Advanced Queries
Fetch employees whose salary is higher than the average salary in their department:


SELECT * 
FROM employees e 
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);
Find the second highest number in a table using a subquery:


SELECT MAX(salary) 
FROM employees 
WHERE salary < (SELECT MAX(salary) FROM employees);
Fetch all employees who are in the same department as an employee with a specific ID:


SELECT * 
FROM employees 
WHERE department_id = (SELECT department_id FROM employees WHERE employee_id = 123);
Fetch employees who do not belong to a specific department:

SELECT * 
FROM employees 
WHERE department_id <> 123;
Return records where a field contains a substring from another table's column:


SELECT * 
FROM employees e 
WHERE e.name LIKE (SELECT '%' || substring_column || '%' FROM other_table);
Update a record in a table based on a condition from another table:


UPDATE employees 
SET salary = 5000 
WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'HR');
Find employees who have the same salary in different departments:

SELECT e1.employee_id, e2.employee_id, e1.salary 
FROM employees e1, employees e2 
WHERE e1.salary = e2.salary 
AND e1.department_id <> e2.department_id;
Date and Time Queries
Find all records added in the last 30 days:

SELECT * 
FROM employees 
WHERE join_date >= NOW() - INTERVAL 30 DAY;
Group records by month and year of a date column:

sql
Copy code
SELECT YEAR(join_date), MONTH(join_date), COUNT(*) 
FROM employees 
GROUP BY YEAR(join_date), MONTH(join_date);
Fetch records where a timestamp falls within a given time range (last 7 days):


SELECT * 
FROM employees 
WHERE timestamp_column >= NOW() - INTERVAL 7 DAY;
Fetch records where the date field is today:


SELECT * 
FROM employees 
WHERE DATE(join_date) = CURDATE();
Calculate the difference in days between two date columns:


SELECT DATEDIFF(end_date, start_date) AS days_difference 
FROM employees;
Fetch employees who joined between two specific dates:


SELECT * 
FROM employees 
WHERE join_date BETWEEN 'YYYY-MM-DD' AND 'YYYY-MM-DD';
Aggregations and Group By
Find the total sales made by each employee:

sql
Copy code
SELECT employee_id, SUM(sales_amount) 
FROM sales 
GROUP BY employee_id;
Count the number of employees in each department:

sql
Copy code
SELECT department_id, COUNT(employee_id) AS employee_count 
FROM employees 
GROUP BY department_id;
Find the average salary for each department:

sql
Copy code
SELECT department_id, AVG(salary) 
FROM employees 
GROUP BY department_id;
Find the minimum and maximum salaries in each department:

sql
Copy code
SELECT department_id, MIN(salary), MAX(salary) 
FROM employees 
GROUP BY department_id;
Find the highest and lowest prices of products within each category:

sql
Copy code
SELECT category_id, MAX(price) AS highest_price, MIN(price) AS lowest_price 
FROM products 
GROUP BY category_id;
Find the sum of sales for each customer within a specific date range:

sql
Copy code
SELECT customer_id, SUM(sales_amount) 
FROM sales 
WHERE sale_date BETWEEN 'YYYY-MM-DD' AND 'YYYY-MM-DD' 
GROUP BY customer_id;
Find the count of distinct values in a column:

sql
Copy code
SELECT COUNT(DISTINCT column_name) 
FROM table_name;
Performance Optimization
Optimize a query with multiple joins for performance:

Ensure proper indexing on join columns.
Use EXPLAIN to analyze query performance.
Avoid SELECT *, only retrieve necessary columns.
Use LIMIT when possible to reduce large result sets.
Query that uses indexing to speed up a slow query:

sql
Copy code
SELECT * 
FROM employees 
WHERE indexed_column = 'value';
Use the EXPLAIN statement to analyze query performance:

sql
Copy code
EXPLAIN SELECT * 
FROM employees 
WHERE salary > 5000;
Query using indexing to fetch the first 10 employees ordered by salary:

sql
Copy code
SELECT * 
FROM employees 
ORDER BY salary ASC 
LIMIT 10;
Find records in a large table that match a value using a partitioned index:

sql
Copy code
SELECT * 
FROM partitioned_table 
WHERE partitioned_column = 'value';
Create and use a materialized view in a database to speed up query results:

sql
Copy code
CREATE MATERIALIZED VIEW employee_sales AS 
SELECT employee_id, SUM(sales_amount) 
FROM sales 
GROUP BY employee_id;

-- Query from the materialized view
SELECT * 
FROM employee_sales;
Delete old records efficiently from a large table (e.g., based on a timestamp):

sql
Copy code
DELETE FROM employees 
WHERE timestamp_column < NOW() - INTERVAL 1 YEAR;
Database Management and Administration
Create a new user with limited privileges on specific tables:

sql
Copy code
CREATE USER 'new_user'@'localhost' IDENTIFIED BY 'password';
GRANT SELECT, INSERT ON database_name.table_name TO 'new_user'@'localhost';
Backup and restore a specific database table:

Backup:
bash
Copy code
mysqldump -u username -p database_name table_name > backup.sql
Restore:
bash
Copy code
mysql -u username -p database_name < backup.sql
Grant read and write access to a specific user on a database:

sql
Copy code
GRANT SELECT, INSERT, UPDATE, DELETE ON database_name.* TO 'username'@'localhost';
Monitor active connections to the database:

sql
Copy code
SHOW PROCESSLIST;